package trees;

import estructuras.Nodo;
import estructuras.NodoAVL;

/**
 * Árbol AVL
 * 
 * @author Pablo
 *
 */
public class Avl extends Abb {

	private enum Balance {
		LEFT_LEFT, LEFT_RIGHT, RIGHT_LEFT, RIGHT_RIGHT
	}

	public Nodo insert(String key, String value) {
		Nodo nodeToReturn = super.insert(key, value);
		NodoAVL nodeAdded = (NodoAVL) nodeToReturn;

		while (nodeAdded != null) {
			nodeAdded.updateHeight();
			balanceAfterInsert(nodeAdded);
			nodeAdded = (NodoAVL) nodeAdded.getParent();
		}

		return nodeToReturn;
	}

	public void delete(String key) {

	}

	private void balanceAfterInsert(NodoAVL node) {
		int balanceFactor = node.getBalanceFactor();
		if (balanceFactor > 1 || balanceFactor < -1) {
			NodoAVL parent = null;
			NodoAVL child = null;
			Balance balance = null;
			if (balanceFactor < 0) {
				parent = (NodoAVL) node.getLeft();
				balanceFactor = parent.getBalanceFactor();
				if (balanceFactor < 0) {
					child = (NodoAVL) parent.getLeft();
					balance = Balance.LEFT_LEFT;
				} else {
					child = (NodoAVL) parent.getRight();
					balance = Balance.LEFT_RIGHT;
				}
			} else {
				parent = (NodoAVL) node.getRight();
				balanceFactor = parent.getBalanceFactor();
				if (balanceFactor < 0) {
					child = (NodoAVL) parent.getLeft();
					balance = Balance.RIGHT_LEFT;
				} else {
					child = (NodoAVL) parent.getRight();
					balance = Balance.RIGHT_RIGHT;
				}
			}

			if (balance == Balance.LEFT_RIGHT) {
				// Left-Right (Left rotation, right rotation)
				rotateLeft(parent);
				rotateRight(node);
			} else if (balance == Balance.RIGHT_LEFT) {
				// Right-Left (Right rotation, left rotation)
				rotateRight(parent);
				rotateLeft(node);
			} else if (balance == Balance.LEFT_LEFT) {
				// Left-Left (Right rotation)
				rotateRight(node);
			} else {
				// Right-Right (Left rotation)
				rotateLeft(node);
			}

			node.updateHeight(); // New child node
			child.updateHeight(); // New child node
			parent.updateHeight(); // New Parent node
		}
	}
	
	  private void balanceAfterDelete(AVLNode<T> node) {
	        int balanceFactor = node.getBalanceFactor();
	        if (balanceFactor == -2 || balanceFactor == 2) {
	            if (balanceFactor == -2) {
	                AVLNode<T> ll = (AVLNode<T>) node.lesser.lesser;
	                int lesser = (ll != null) ? ll.height : 0;
	                AVLNode<T> lr = (AVLNode<T>) node.lesser.greater;
	                int greater = (lr != null) ? lr.height : 0;
	                if (lesser >= greater) {
	                    rotateRight(node);
	                    node.updateHeight();
	                    if (node.parent != null)
	                        ((AVLNode<T>) node.parent).updateHeight();
	                } else {
	                    rotateLeft(node.lesser);
	                    rotateRight(node);

	                    AVLNode<T> p = (AVLNode<T>) node.parent;
	                    if (p.lesser != null)
	                        ((AVLNode<T>) p.lesser).updateHeight();
	                    if (p.greater != null)
	                        ((AVLNode<T>) p.greater).updateHeight();
	                    p.updateHeight();
	                }
	            } else if (balanceFactor == 2) {
	                AVLNode<T> rr = (AVLNode<T>) node.greater.greater;
	                int greater = (rr != null) ? rr.height : 0;
	                AVLNode<T> rl = (AVLNode<T>) node.greater.lesser;
	                int lesser = (rl != null) ? rl.height : 0;
	                if (greater >= lesser) {
	                    rotateLeft(node);
	                    node.updateHeight();
	                    if (node.parent != null)
	                        ((AVLNode<T>) node.parent).updateHeight();
	                } else {
	                    rotateRight(node.greater);
	                    rotateLeft(node);

	                    AVLNode<T> p = (AVLNode<T>) node.parent;
	                    if (p.lesser != null)
	                        ((AVLNode<T>) p.lesser).updateHeight();
	                    if (p.greater != null)
	                        ((AVLNode<T>) p.greater).updateHeight();
	                    p.updateHeight();
	                }
	            }
	        }
	    }

}
