package trees;

import estructuras.Nodo;

/**
 * √Årbol ABB
 * 
 * @author Pablo
 *
 */
public class Abb implements ITree {

	private Nodo root;
	private int size;

	public Abb() {
		this.root = null;
		this.size = 0;
	}

	public int size() {
		return size;
	}

	@Override
	public String search(String key) {

		Nodo nodo = root;
		while (nodo != null) {
			if (key.equals(nodo.getKey()))
				return nodo.getValue();
			if (key.compareTo(nodo.getKey()) < 0)
				nodo = nodo.getLeft();
			else
				nodo = nodo.getRight();
		}
		return null;

	}

	@Override
	public void insert(String key, String value) {
		Nodo nuevo = new Nodo(null, key, value);

		if (root == null) {
			size++;
			root = nuevo;
			return;
		}
		Nodo nodo = root;
		while (nodo != null) {

			if (nodo.getKey().compareTo(key) > 0) {
				if (nodo.getRight() == null) {
					nodo.setRight(nuevo);
					nuevo.setParent(nodo);
					size++;
					return;
				}
				nodo = nodo.getRight();

			} else {
				if (nodo.getLeft() == null) {
					nodo.setLeft(nuevo);
					nuevo.setParent(nodo);
					size++;
					return;
				}
				nodo = nodo.getLeft();
			}
		}

	}

	protected Nodo getNodo(String key) {
		Nodo node = root;
		while (node != null) {
			if (key.compareTo(node.getKey()) == 0) {
				return node;
			} else if (key.compareTo(node.getValue()) < 0) {
				node = node.getLeft();
			} else {
				node = node.getRight();
			}
		}
		return null;
	}

	public void delete(String key) {
		Nodo toRemoved = getNodo(key);
		if (toRemoved != null)
			removeNode(toRemoved);
	}

	protected void removeNode(Nodo toRemoved) {
		if (toRemoved != null) {
			Nodo replacementNode = this.getReplacementNode(toRemoved);
			replaceNodeWithNode(toRemoved, replacementNode);
		}
	}
	
	 protected Nodo getReplacementNode(Nodo nodeToRemoved) {
	        Nodo replacement = null;
	        if (nodeToRemoved.getLeft() != null && nodeToRemoved.getRight() == null) {
	            // Usamos el de la izquierda
	            replacement = nodeToRemoved.getLeft();
	        } else if (nodeToRemoved.getRight() != null && nodeToRemoved.getLeft() == null) {
	            // Using the greater subtree (there is no lesser subtree, no
	            // refactoring)
	            replacement = nodeToRemoved.getRight();
	        } else if (nodeToRemoved.greater != null && nodeToRemoved.lesser != null) {
	            // Two children
	            // Add some randomness to deletions, so we don't always use the
	            // greatest/least on deletion
	            if (modifications % 2 != 0) {
	                replacement = this.getGreatest(nodeToRemoved.lesser);
	                if (replacement == null)
	                    replacement = nodeToRemoved.lesser;
	            } else {
	                replacement = this.getLeast(nodeToRemoved.greater);
	                if (replacement == null)
	                    replacement = nodeToRemoved.greater;
	            }
	            modifications++;
	        }
	        return replacement;
	    }
}
