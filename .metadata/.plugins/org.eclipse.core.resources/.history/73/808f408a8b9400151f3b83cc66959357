package estructuras;

public class Abb implements ITree {

	private Nodo root;

	public Abb(){
		this.root = null;
	}
	
	private String search(String item, Nodo root) {
		if (root == null)
			return null;
		else if (item.equals(root.getKey()))
			return root.getValue();
		else if (item.compareTo(root.getKey()) < 0)
			return search(item, root.getLeft());
		else
			return search(item, root.getRight());
	}

	@Override
	public String search(String key) {
		return search(key, root);
	}

	@Override
	public void insert(String key, String value) {
		if (root == null) {
			root = new Nodo(key, value);
			return;
		}
		Nodo nodo = root;
		while (true) {
			if (nodo.getKey().equals(key)) {
				nodo.setValue(value);
				return;
			}
			if (nodo.getKey().compareTo(key) > 0)
				if (nodo.getLeft() != null)
					nodo = nodo.getLeft();
				else {
					nodo.setLeft(new Nodo(key, value));
					return;
				}
			else if (nodo.getRight() != null)
				nodo = nodo.getRight();
			else {
				nodo.setRight(new Nodo(key, value));
				return;
			}
		}

	}

	Nodo unir(Nodo izq, Nodo der) {
		if (izq == null)
			return der;
		if (der == null)
			return izq;
		Nodo centro = unir(izq.getRight(), der.getLeft());
		izq.setRight(centro);
		der.setLeft(izq);
		return der;
	}

	private Nodo delete(String key, Nodo nodo) {
		if (nodo == null)
			return null;
		if (nodo.getKey().equals(key))
			return unir(nodo.getLeft(), nodo.getRight());

		if (key.compareTo(nodo.getKey()) < 0)
			nodo.setLeft(delete(key, nodo.getLeft()));
		else
			nodo.setRight(delete(key, nodo.getRight()));
		return nodo;
	}

	@Override
	public void delete(String key) {
		root = delete(key, root);
	}

}
